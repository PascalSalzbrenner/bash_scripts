#!/bin/bash

# optional arguments: -l for lowest pressure, -p for highest pressure, -n for the names of the structures we want to take into account, -h for help string

while getopts ":l:p:n:h" opt; do
	case $opt in
		l)
			low_press=$OPTARG;;
		p)
			high_press=$OPTARG;;
		n)
			struc_name=("$OPTARG")
			until [[ $(eval "echo \${$OPTIND}") =~ ^-.* ]] || [ -z $(eval "echo \${$OPTIND}") ]; do
				struc_name+=($(eval "echo \${$OPTIND}"))
				OPTIND=$((OPTIND + 1))
			done;;
		h)
			echo "Script to calculate the EDDP deviations of a range of structures at a range of pressures and plot them (nicely, maybe)"
			echo "Usage: visualise_dev_press_vol [-l low_press] [-p high_press] [-n struc_name1 struc_name2 ...]"
			echo ""
			echo "Optional arguments"
			echo "-l low_press [GPa]  : the lowest pressure which is taken into account"
			echo "-p high_press [GPa] : the highest pressure which is taken into account"
			echo "-s struc_name       : the names of structures which are taken into account - in the AIRSS seed 'format formula-struc_name', the required part here is, well, struc_name"
			echo "-h                  : print this message and exit"
			echo "If no variables are supplied, all structures are taken into account for all pressures"
			exit 1
	esac
done

# set up temporary file to contain the output of ca -r -l so that we don't have to run it all the time
ca -r -l >> temp_ca

if [ -z $low_press ]; then
	low_press=`awk 'NR==1 {print $2}' temp_ca | awk 'BEGIN {FS="."} {print $1}'`
fi

if [ -z $high_press ]; then
	high_press=`awk 'END{print $2}' temp_ca | awk 'BEGIN {FS="."} {print $1}'`
fi

if [ -z $struc_name ]; then
	struc_name=`(awk -v press_name="_${low_press}p0" '$0 ~ press_name {print $1}' temp_ca | awk 'BEGIN {FS="-"} {print $2}')`
fi

# determine the name of the .eddp file and directory
form_name=`awk 'NR==1 {print $1}' temp_ca | awk 'BEGIN {FS="_"} {print $1}'`

# copy them into the directory if they don't exist yet
if [ ! -f ${form_name}.eddp ] || [ ! -d ${form_name} ]; then
	cp -r ../${form_name}.{,.eddp} .
fi

echo "set terminal postscript eps colour font 'Helvetica,20'" > dev_press.gnu
echo "set terminal postscript eps colour font 'Helvetica,20'" > dev_vol.gnu

echo "set style data points" >> dev_press.gnu
echo "set style data points" >> dev_vol.gnu

echo "set output '| epstopdf --filter --outfile=dev_press.pdf'" >> dev_press.gnu
echo "set output '| epstopdf --filter --outfile=dev_vol.pdf'" >> dev_vol.gnu

echo "set key top center" >> dev_press.gnu
echo "set key top center" >> dev_vol.gnu

echo "set key box lt -1 lw 2 width 2 height 1.5 opaque font 'Helvetica,15'" >> dev_press.gnu
echo "set key box lt -1 lw 2 width 2 height 1.5 opaque font 'Helvetica,15'" >> dev_vol.gnu

echo "set linetype 1 lc rgb '#DC143C'" >> dev_press.gnu
echo "set linetype 2 lc rgb '#D95F02'" >> dev_press.gnu
echo "set linetype 3 lc rgb '#FFCC00'" >> dev_press.gnu
echo "set linetype 4 lc rgb '#66A61E'" >> dev_press.gnu
echo "set linetype 5 lc rgb '#191970'" >> dev_press.gnu
echo "set linetype 6 lc rgb '#7570B3'" >> dev_press.gnu
echo "set linetype 7 lc rgb '#E7298A'" >> dev_press.gnu
echo "set linetype 8 lc rgb '#1E90FF'" >> dev_press.gnu
echo "set linetype 9 lc rgb '#1B9E77'" >> dev_press.gnu
echo "set linetype 10 lc rgb '#B8860B'" >> dev_press.gnu
echo "set linetype cycle 10" >> dev_press.gnu

echo "set linetype 1 lc rgb '#DC143C'" >> dev_vol.gnu
echo "set linetype 2 lc rgb '#D95F02'" >> dev_vol.gnu
echo "set linetype 3 lc rgb '#FFCC00'" >> dev_vol.gnu
echo "set linetype 4 lc rgb '#66A61E'" >> dev_vol.gnu
echo "set linetype 5 lc rgb '#191970'" >> dev_vol.gnu
echo "set linetype 6 lc rgb '#7570B3'" >> dev_vol.gnu
echo "set linetype 7 lc rgb '#E7298A'" >> dev_vol.gnu
echo "set linetype 8 lc rgb '#1E90FF'" >> dev_vol.gnu
echo "set linetype 9 lc rgb '#1B9E77'" >> dev_vol.gnu
echo "set linetype 10 lc rgb '#B8860B'" >> dev_vol.gnu
echo "set linetype cycle 10" >> dev_vol.gnu

echo "set xlabel 'Pressure [GPa]'" >> dev_press.gnu
echo "set xlabel 'Volume [A^3/atom]'" >> dev_vol.gnu

echo "set ylabel 'Deviation [meV/atom]'" >> dev_press.gnu
echo "set ylabel 'Deviation [meV/atom]'" >> dev_vol.gnu

press_plot="plot"
vol_plot="plot"

for sn in ${struc_name[@]}; do
	
	echo "# Pressure [GPa]; Volume [A**3/atom]; Deviation [meV/atom]" > dev_press_vol_${sn}.txt

	while read line; do

		seed=`echo $line | awk '{print $1}'`
		press=`echo $line | awk '{print $2}'`
		vol=`echo $line | awk '{print $3}'`
		nform=`echo $line | awk '{print $5}'`
		fu=`echo $line | awk '{print $6}'`
	
		if (( $(echo "press >= low_press" |bc -l)  )) && (( $(echo "press <= high_press" |bc -l)  )); then
		
			# read number of atoms per formula unit
			fu_arr=( ${fu//[!0-9]/ } )
			natoms_fu=0
			for i in ${fu_arr[@]}; do
				natoms_fu=$(echo "$natoms_fu + $i" | bc -l)
			done

			# calculate number of atoms per cell
			natoms=$(( natoms_fu*nform ))

			# calculate dev

			# create appropriate EDDP file for res2dev
			form_press_name=${seed%-*} # this should be of the form GaH_100p0
			if [ ! -f ${form_press_name}.eddp ]; then
				form_name=${form_press_name%_*}
				cp ${form_name}.eddp ${form_press_name}.eddp
			fi

			dev=`res2dev $seed | awk '{print $2}'`
			dev_per_atom=$(awk "BEGIN {print $dev*1000/$natoms; exit}")
			
			echo $press $vol $dev_per_atom >> dev_press_vol_${sn}.txt
		fi
	done < <(awk -v pattern=$sn '$0 ~ pattern {print}' temp_ca)

	title="`echo $sn | sed 's/_/\\\_/g'`"

	press_plot+=" 'dev_press_vol_${sn}.txt' u 1:3 w linespoints pt 7 ps 1.5 lw 2.5 title '${title}',"
	vol_plot+=" 'dev_press_vol_${sn}.txt' u 2:3 w linespoints pt 7 ps 1.5 lw 2.5 title '${title}',"
done

press_plot=${press_plot::-1}
vol_plot=${vol_plot::-1}

echo $press_plot >> dev_press.gnu
echo $vol_plot >> dev_vol.gnu

rm temp_ca 

gnuplot dev_press.gnu
gnuplot dev_vol.gnu
